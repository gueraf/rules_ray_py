version: 2.1

jobs:
  run_ray_example:
    machine:
      image: ubuntu-2204:current
    resource_class: large
    steps:
      - checkout
      - run:
          name: "Start Ray container"
          command: |
            docker run -d --name ray -p 8265:8265 -v /tmp:/tmp rayproject/ray:2.45.0-py312-cpu ray start --head --disable-usage-stats --block
      - run:
          name: "Update local_path_override"
          command: |
            sed -i "s|./rules_ray_py|$(pwd)|g" /tmp/rules_ray_py_test/MODULE.bazel && \
            cat /tmp/rules_ray_py_test/MODULE.bazel
      - run:
          name: "Wait for Ray cluster to be healthy inside container"
          command: |
            docker run -it --rm \
              gueraf/rules_ray_py_test:latest \
              bash -c 'echo "Waiting for Ray cluster to be healthy..."; \
              max_retries=30; \
              counter=0; \
              until ray status > /dev/null 2>&1; do \
                counter=$((counter + 1)); \
                if [ $counter -eq $max_retries ]; then \
                  echo "Ray cluster failed to become healthy after $max_retries attempts."; \
                  docker logs ray; \
                  exit 1; \
                fi; \
                echo "Ray cluster not ready yet. Waiting (attempt $counter/$max_retries)..."; \
                sleep 2; \
              done; \
              echo "Ray cluster is healthy!"'
      - run:
          name: "Run examples/py_ray_hello_world:hello_world_ray_job inside container"
          command: |
            cd /tmp/rules_ray_py_test/ && \
            docker run -it --rm \
              -v $(pwd):/workspace \
              -v /tmp/rules_ray_py_test:/tmp/rules_ray_py_test \
              -w /workspace \
              gueraf/rules_ray_py_test:latest \
              timeout 2m bazelisk run examples/py_ray_hello_world:hello_world_ray_job -- --wait=true
      - run:
          name: "Collect Ray logs"
          command: |
            mkdir -p /tmp/ray_logs
            docker cp ray:/tmp/ray/session_latest/logs/runtime_env_setup-*.log /tmp/ray_logs/ || echo "No runtime_env_setup logs found"
            docker cp ray:/tmp/ray/session_latest/logs/runtime_env_agent.log /tmp/ray_logs/ || echo "No runtime_env_agent.log found"
            docker logs ray > /tmp/ray_logs/ray_container.log 2>&1 || echo "Could not capture Ray container logs"
          when: always # This ensures the step runs even if previous steps fail
      - store_artifacts:
          path: /tmp/ray_logs
          destination: ray-logs

workflows:
  version: 2
  main:
    jobs:
      - run_ray_example
