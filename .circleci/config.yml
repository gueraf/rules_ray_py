version: 2.1

jobs:
  run_ray_example:
    machine:
      image: ubuntu-2204:current
      # docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - run:
          name: "Start Ray container in detached mode"
          command: |
            docker run -d --name ray -p 8265:8265 -v /tmp:/tmp rayproject/ray:2.45.0-py312-cpu ray start --head --disable-usage-stats # --dashboard-host 127.0.0.1
      - run:
          name: "Wait for Ray to start"
          command: |
            sleep 10 # Wait for Ray to start
            docker logs ray
            docker exec ray ray status
      # - run:
      #     name: "Wait for Ray cluster to be accessible from host machine"
      #     command: |
      #       echo "Checking if Ray cluster is accessible from host machine..."
      #       max_retries=30
      #       counter=0
      #       while [ $counter -lt $max_retries ]; do
      #         # Run wget with strict timeout and only one try
      #         wget -q --timeout=3 --tries=1 --dns-timeout=3 --connect-timeout=3 --read-timeout=3 http://127.0.0.1:8265
      #         if [ $? -eq 0 ]; then
      #           # Success
      #           break
      #         fi

      #         counter=$((counter + 1))
      #         if [ $counter -eq $max_retries ]; then
      #           echo "Ray cluster failed to be accessible after $max_retries attempts."
      #           docker logs ray
      #           exit 1
      #         fi
      #         echo "Ray cluster not accessible yet. Waiting (attempt $counter/$max_retries)..."
      #         sleep 2
      #       done
      #       echo "Ray cluster is accessible from host machine!"
      - run:
          name: "Verify Ray cluster is healthy"
          command: |
            echo "Verifying Ray cluster is healthy..."
            max_retries=30
            counter=0
            until docker exec ray ray status > /dev/null 2>&1; do
              counter=$((counter + 1))
              if [ $counter -eq $max_retries ]; then
                echo "Ray cluster failed to become healthy after $max_retries attempts."
                docker logs ray
                exit 1
              fi
              echo "Ray cluster not ready yet. Waiting (attempt $counter/$max_retries)..."
              sleep 2
            done
            echo "Ray cluster is healthy!"
            echo "Full Ray cluster status:"
            docker exec ray ray status
      - run:
          name: "Run hello_world_ray_job"
          command: |
            cd /tmp/rules_ray_py_test/ && \
            docker run -it --rm \
              --network host \
              -v $(pwd):/workspace \
              -v /tmp/rules_ray_py_test:/tmp/rules_ray_py_test \
              -w /workspace \
              -e RAY_ADDRESS="http://127.0.0.1:8265" \
              gueraf/rules_ray_py_test:latest \
              bash -c 'sed -i "s|./rules_ray_py|/workspace|g" /tmp/rules_ray_py_test/MODULE.bazel && \
              echo "Updated MODULE.bazel:" && \
              cat /tmp/rules_ray_py_test/MODULE.bazel && \
              cd /tmp/rules_ray_py_test/ && \
              git clean -fd && \
              git reset --hard && \
              git checkout HEAD && \
              timeout 2m bazelisk run examples/py_ray_hello_world:hello_world_ray_job -- --ray_cluster_address=http://127.0.0.1:8265 --wait=true'
      - run:
          name: "Collect Ray logs"
          command: |
            mkdir -p /tmp/ray_logs
            docker cp ray:/tmp/ray/session_latest/logs/runtime_env_setup-*.log /tmp/ray_logs/ || echo "No runtime_env_setup logs found"
            docker cp ray:/tmp/ray/session_latest/logs/runtime_env_agent.log /tmp/ray_logs/ || echo "No runtime_env_agent.log found"
            docker logs ray > /tmp/ray_logs/ray_container.log 2>&1 || echo "Could not capture Ray container logs"
          when: always # This ensures the step runs even if previous steps fail
      - store_artifacts:
          path: /tmp/ray_logs
          destination: ray-logs

workflows:
  version: 2
  main:
    jobs:
      - run_ray_example
